from typing import Dict, Union
import pandas as pd
import plotly.graph_objects as go
import requests
from sklearn.linear_model import LinearRegression

def get_current_temperature(city: str, api_key_current: str) -> Union[float, dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API OpenWeatherMap.

    Args:
        city (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
        api_key_current (str): API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ OpenWeatherMap.

    Returns:
        float: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω.
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º "error", –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """

    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": api_key_current,
        "units": "metric"
    }

    try:
        response = requests.get(base_url, params=params)
        data = response.json()

        if response.status_code == 401:
            return {
                "cod": "401",
                "message":
                    "Invalid API key. Please see https://openweathermap.org/faq#error401 for more info."
            }

        if response.status_code == 200:
            return data['main']['temp']

    except Exception as e:
        return {"error": str(e)}

    return {"error": "Unexpected error occurred."}


def analyze_city_temperature(city_df: pd.DataFrame, selected_city: str) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.

    Args:
        city_df (pd.DataFrame): DataFrame —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
            –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
                - "timestamp" (datetime): –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
                - "temperature" (float): –ó–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
                - "season" (str): –°–µ–∑–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
        selected_city (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞:
            - 'city': –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
            - 'average_temperature': –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            - 'min_temperature': –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            - 'max_temperature': –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            - 'season_profile': –ü—Ä–æ—Ñ–∏–ª—å —Å–µ–∑–æ–Ω–∞ (—Å—Ä–µ–¥–Ω–∏–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã).
            - 'trend': –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (+/-)
            - 'rolling_mean': –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
            - 'rolling_std': –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
            - 'anomalies': –°–ø–∏—Å–æ–∫ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ (–≤—Ä–µ–º—è –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞).
    """

    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –æ–∫–Ω–æ–º –≤ 30 –¥–Ω–µ–π
    city_df['rolling_mean'] = city_df.groupby('season')['temperature'].transform(
        lambda x: x.rolling(window=30, min_periods=1).mean()
    )
    city_df['rolling_std'] = city_df.groupby('season')['temperature'].transform(
        lambda x: x.rolling(window=30, min_periods=1).std()
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ä–µ–¥–Ω–µ–µ ¬± 2ùúé
    city_df['anomaly'] = city_df.apply(
        lambda x: (x["temperature"] > x['rolling_mean'] + 2 * x['rolling_std']) or
                  (x["temperature"] < x['rolling_mean'] - 2 * x['rolling_std']),
        axis=1
    )

    # –ü—Ä–æ—Ñ–∏–ª—å —Å–µ–∑–æ–Ω–∞
    season_profile = city_df.groupby('season')['temperature'].agg(['mean', 'std'])

    # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å—Ä–µ–¥–Ω—è—è, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    avg_temp = city_df['temperature'].mean()
    min_temp = city_df['temperature'].min()
    max_temp = city_df['temperature'].max()

    # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    anomalies = city_df[city_df['anomaly']]

    # –¢—Ä–µ–Ω–¥
    model = LinearRegression()
    model.fit(city_df['timestamp'].values.reshape(-1, 1), city_df["temperature"].values)
    trend = model.coef_[0]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = {
        'city': selected_city,
        'average_temperature': avg_temp,
        'min_temperature': min_temp,
        'max_temperature': max_temp,
        'season_profile': season_profile,
        'trend': trend,
        'rolling_mean': city_df[['timestamp', 'rolling_mean']],
        'rolling_std': city_df[['timestamp', 'rolling_std']],
        'anomalies': anomalies[['timestamp', 'temperature']]
    }

    return result

def plot_temperature_time_series(data: pd.DataFrame, anomalies: pd.DataFrame, rolling_mean: pd.DataFrame, rolling_std: pd.DataFrame, city_name: str) -> go.Figure:
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π –∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –º–µ—Ç—Ä–∏–∫.

    Args:
        data (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π.
            –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
                - "timestamp" (datetime): –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
                - "temperature" (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
        anomalies (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö.
            –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
                - "timestamp" (datetime): –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–æ–º–∞–ª–∏–∏.
                - "temperature" (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–∏.
        rolling_mean (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –æ —Å–∫–æ–ª—å–∑—è—â–µ–º —Å—Ä–µ–¥–Ω–µ–º.
            –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
                - "timestamp" (datetime): –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
                - "rolling_mean" (float): –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ.
        rolling_std (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –æ —Å–∫–æ–ª—å–∑—è—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.
            –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
                - "timestamp" (datetime): –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
                - "rolling_std" (float): –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.

    Returns:
        go.Figure: –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly Figure.
    """

    fig = go.Figure()

    # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
    fig.add_trace(go.Scatter(
        x=data['timestamp'],
        y=data['temperature'],
        mode='lines',
        name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        line=dict(color='#8f8fe6', width=1),
        hovertemplate='–î–∞—Ç–∞: %{x}<br>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %{y}¬∞C'
    ))

    # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
    if not anomalies.empty:
        fig.add_trace(go.Scatter(
            x=anomalies['timestamp'],
            y=anomalies['temperature'],
            mode='markers',
            name='–ê–Ω–æ–º–∞–ª–∏–∏',
            marker=dict(color='#e68f8f', size=6, symbol='circle'),
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %{y}¬∞C'
        ))

    # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
    if not rolling_mean.empty:
        fig.add_trace(go.Scatter(
            x=rolling_mean['timestamp'],
            y=rolling_mean['rolling_mean'],
            mode='lines',
            name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ',
            line=dict(color='rgba(143, 230, 143, 0.7)', width=2),
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: %{y}¬∞C'
        ))

    # –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã
    if not rolling_std.empty:
        upper_bound = rolling_mean['rolling_mean'] + 2 * rolling_std['rolling_std']
        lower_bound = rolling_mean['rolling_mean'] - 2 * rolling_std['rolling_std']

        fig.add_trace(go.Scatter(
            x=rolling_mean['timestamp'],
            y=upper_bound,
            mode='lines',
            name='–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (rolling_mean + 2œÉ)',
            line=dict(color='rgba(214, 97, 97, 0.7)', dash='dot', width=1.5),
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–ì—Ä–∞–Ω–∏—Ü–∞: %{y}¬∞C'
        ))

        fig.add_trace(go.Scatter(
            x=rolling_mean['timestamp'],
            y=lower_bound,
            mode='lines',
            name='–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (rolling_mean - 2œÉ)',
            line=dict(color='rgba(230, 187, 143, 0.7)', dash='dot', width=1.5),
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–ì—Ä–∞–Ω–∏—Ü–∞: %{y}¬∞C'
        ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title=f"{city_name}",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        template="plotly_white",
        hovermode="x unified"
    )

    return fig


def plot_seasonal_profile(season_profile: pd.DataFrame) -> go.Figure:
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –æ–±–ª–∞—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.

    Args:
        season_profile (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –æ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö.
        –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
            - 'mean' (float): –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ–∑–æ–Ω–∞.
            - 'std' (float): –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–µ–∑–æ–Ω–∞.

    Returns:
        go.Figure: –û–±—ä–µ–∫—Ç Plotly Figure —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.
    """

    seasons = season_profile.index.tolist()
    means = season_profile['mean'].tolist()
    stds = season_profile['std'].tolist()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
    fig_profile = go.Figure()

    # –õ–∏–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    fig_profile.add_trace(go.Scatter(
        x=seasons,
        y=means,
        mode='lines+markers',
        name='–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        line=dict(color='#8fe68f', width=2),
        hovertemplate='–°–µ–∑–æ–Ω: %{x}<br>–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %{y}¬∞C'
    ))

    # –û–±–ª–∞—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    fig_profile.add_trace(go.Scatter(
        x=seasons + seasons[::-1],
        y=[m + s for m, s in zip(means, stds)] + [m - s for m, s in zip(means, stds)][::-1],
        fill='toself',
        fillcolor='rgba(230, 187, 143, 0.2)',  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π #e6bb8f
        line=dict(color='rgba(255,255,255,0)'),
        hoverinfo='skip',
        name='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    fig_profile.update_layout(
        title="–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        xaxis_title="–°–µ–∑–æ–Ω",
        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
        template="plotly_white",
        hovermode="x unified"
    )

    return fig_profile



def plot_annual_temperature_cycle(city_data: pd.DataFrame) -> go.Figure:
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –≥–æ–¥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ –æ–±–ª–∞—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.

    Args:
        city_data (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ. –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
            - 'timestamp' (datetime): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞.
            - 'temperature' (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è.

    Returns:
        go.Figure: –û–±—ä–µ–∫—Ç Plotly Figure —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –≥–æ–¥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
    """

    city_data['month'] = city_data['timestamp'].dt.month

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    monthly_avg = city_data.groupby('month')['temperature'].mean().reset_index()
    monthly_std = city_data.groupby('month')['temperature'].std().reset_index()

    fig = go.Figure()

    # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    fig.add_trace(go.Scatter(
        x=monthly_avg['month'],
        y=monthly_avg['temperature'],
        mode='lines+markers',
        name='–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        line=dict(color='#8f8fe6', width=2),
        hovertemplate='–ú–µ—Å—è—Ü: %{x}<br>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %{y}¬∞C'
    ))

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ + 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    fig.add_trace(go.Scatter(
        x=monthly_avg['month'],
        y=monthly_avg['temperature'] + 2 * monthly_std['temperature'],
        mode='lines',
        name='–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å—Ä–µ–¥–Ω—è—è + œÉ)',
        line=dict(color='#8f8fe6', dash='dot'),
        showlegend=False,
        hovertemplate='–ú–µ—Å—è—Ü: %{x}<br>–ì—Ä–∞–Ω–∏—Ü–∞: %{y}¬∞C'
    ))

    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    fig.add_trace(go.Scatter(
        x=monthly_avg['month'],
        y=monthly_avg['temperature'] - 2 * monthly_std['temperature'],
        mode='lines',
        name='–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å—Ä–µ–¥–Ω—è—è - œÉ)',
        line=dict(color='#8f8fe6', dash='dot'),
        fill='tonexty',
        fillcolor='rgba(143, 143, 230, 0.2)',
        showlegend=False,
        hovertemplate='–ú–µ—Å—è—Ü: %{x}<br>–ì—Ä–∞–Ω–∏—Ü–∞: %{y}¬∞C'
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        title="–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
        xaxis=dict(
            tickmode='array',
            tickvals=list(range(1, 13)),
            ticktext=['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        ),
        template="plotly_white",
        hovermode="x unified"
    )

    return fig
